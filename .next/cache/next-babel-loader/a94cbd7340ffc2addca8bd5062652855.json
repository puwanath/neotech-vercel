{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\neo.co.th\\\\nextapp\\\\src\\\\components\\\\header\\\\Indicator.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// react\nimport React, { Component } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppLink from '../shared/AppLink';\n\nvar Indicator = /*#__PURE__*/function (_Component) {\n  _inherits(Indicator, _Component);\n\n  var _super = _createSuper(Indicator);\n\n  function Indicator(props) {\n    var _this;\n\n    _classCallCheck(this, Indicator);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"wrapperRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOutsideClick\", function (event) {\n      var open = _this.state.open;\n\n      if (_this.wrapperRef.current && !_this.wrapperRef.current.contains(event.target) && open) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonClick\", function (event) {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          dropdown = _this$props.dropdown;\n\n      if (dropdown) {\n        event.preventDefault();\n      }\n\n      _this.toggle();\n\n      if (onClick) {\n        onClick(event);\n      }\n    });\n\n    _this.state = {\n      open: false\n    };\n    return _this;\n  }\n\n  _createClass(Indicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.handleOutsideClick);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var open = this.state.open;\n      var _this$props2 = this.props,\n          onOpen = _this$props2.onOpen,\n          onClose = _this$props2.onClose;\n\n      if (open !== prevState.open) {\n        if (open && onOpen) {\n          onOpen();\n        }\n\n        if (!open && onClose) {\n          onClose();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleOutsideClick);\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState(function (state) {\n        return {\n          open: !state.open\n        };\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.setState(function () {\n        return {\n          open: true\n        };\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.setState(function () {\n        return {\n          open: false\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var open = this.state.open;\n      var _this$props3 = this.props,\n          url = _this$props3.url,\n          className = _this$props3.className,\n          icon = _this$props3.icon;\n      var _this$props4 = this.props,\n          value = _this$props4.value,\n          dropdown = _this$props4.dropdown;\n      var buttonElement;\n      var dropdownElement;\n\n      var title = __jsx(\"span\", {\n        className: \"indicator__area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, icon, value !== undefined && __jsx(\"span\", {\n        className: \"indicator__value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 41\n        }\n      }, value));\n\n      if (url) {\n        buttonElement = __jsx(AppLink, {\n          href: url,\n          className: \"indicator__button\",\n          onClick: this.handleButtonClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }\n        }, title);\n      } else {\n        buttonElement = __jsx(\"button\", {\n          type: \"button\",\n          className: \"indicator__button\",\n          onClick: this.handleButtonClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }\n        }, title);\n      }\n\n      if (dropdown) {\n        dropdownElement = __jsx(\"div\", {\n          className: \"indicator__dropdown\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }\n        }, dropdown);\n      }\n\n      var classes = classNames(\"indicator indicator--trigger--click \".concat(className), {\n        'indicator--opened': open\n      });\n      return __jsx(\"div\", {\n        className: classes,\n        ref: this.wrapperRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, buttonElement, dropdownElement);\n    }\n  }]);\n\n  return Indicator;\n}(Component);\n\nexport default Indicator;","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/components/header/Indicator.tsx"],"names":["React","Component","classNames","AppLink","Indicator","props","createRef","event","open","state","wrapperRef","current","contains","target","close","onClick","dropdown","preventDefault","toggle","document","addEventListener","handleOutsideClick","prevProps","prevState","onOpen","onClose","removeEventListener","setState","url","className","icon","value","buttonElement","dropdownElement","title","undefined","handleButtonClick","classes"],"mappings":"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","sourcesContent":["// react\nimport React, { Component } from 'react';\n\n// third-party\nimport classNames from 'classnames';\n\n// application\nimport AppLink from '../shared/AppLink';\nimport { ILinkProps } from '../../interfaces/menus/link-props';\n\nexport interface IndicatorProps {\n    value?: number;\n    dropdown?: React.ReactNode;\n    icon?: React.ReactNode;\n    url?: string | ILinkProps;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => void;\n    onOpen?: () => void;\n    onClose?: () => void;\n}\n\nexport interface IndicatorState {\n    open: boolean;\n}\n\nclass Indicator extends Component<IndicatorProps, IndicatorState> {\n    wrapperRef = React.createRef<HTMLDivElement>();\n\n    constructor(props: IndicatorProps) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    componentDidUpdate(prevProps: IndicatorProps, prevState: IndicatorState) {\n        const { open } = this.state;\n        const { onOpen, onClose } = this.props;\n\n        if (open !== prevState.open) {\n            if (open && onOpen) {\n                onOpen();\n            }\n            if (!open && onClose) {\n                onClose();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    handleOutsideClick = (event: MouseEvent) => {\n        const { open } = this.state;\n\n        if (this.wrapperRef.current && !this.wrapperRef.current.contains(event.target as HTMLElement) && open) {\n            this.close();\n        }\n    };\n\n    handleButtonClick = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n        const { onClick, dropdown } = this.props;\n\n        if (dropdown) {\n            event.preventDefault();\n        }\n\n        this.toggle();\n\n        if (onClick) {\n            onClick(event);\n        }\n    };\n\n    toggle() {\n        this.setState((state) => ({\n            open: !state.open,\n        }));\n    }\n\n    open() {\n        this.setState(() => ({\n            open: true,\n        }));\n    }\n\n    close() {\n        this.setState(() => ({\n            open: false,\n        }));\n    }\n\n    render() {\n        const { open } = this.state;\n        const { url, className, icon } = this.props;\n        const { value, dropdown } = this.props;\n        let buttonElement;\n        let dropdownElement;\n\n        const title = (\n            <span className=\"indicator__area\">\n                {icon}\n                {value !== undefined && <span className=\"indicator__value\">{value}</span>}\n            </span>\n        );\n\n        if (url) {\n            buttonElement = (\n                <AppLink href={url} className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </AppLink>\n            );\n        } else {\n            buttonElement = (\n                <button type=\"button\" className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </button>\n            );\n        }\n\n        if (dropdown) {\n            dropdownElement = (\n                <div className=\"indicator__dropdown\">\n                    {dropdown}\n                </div>\n            );\n        }\n\n        const classes = classNames(`indicator indicator--trigger--click ${className}`, {\n            'indicator--opened': open,\n        });\n\n        return (\n            <div className={classes} ref={this.wrapperRef}>\n                {buttonElement}\n                {dropdownElement}\n            </div>\n        );\n    }\n}\n\nexport default Indicator;\n"]},"metadata":{},"sourceType":"module"}