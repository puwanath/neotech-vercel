{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\neo.co.th\\\\nextapp\\\\src\\\\components\\\\shared\\\\StroykaSlick.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// react\nimport React, { useCallback, useEffect, useRef, useState } from 'react'; // third-party\n\nimport classNames from 'classnames';\nimport Slick from 'react-slick'; // application\n\nimport { useDirection } from '../../store/locale/localeHooks';\n\nfunction StroykaSlickInner(props) {\n  const {\n    children,\n    forwardRef,\n    beforeChange\n  } = props,\n        otherProps = _objectWithoutProperties(props, [\"children\", \"forwardRef\", \"beforeChange\"]);\n\n  const direction = useDirection();\n  const slickRef = useRef(null);\n  const originalSlickNextRef = useRef(() => {});\n  const originalSlickPrevRef = useRef(() => {});\n  const slickNextRef = useRef(() => {});\n  const slickPrevRef = useRef(() => {});\n\n  const getSlidesCount = () => React.Children.toArray(children).length;\n\n  const getSlidesToShow = () => {\n    const {\n      responsive,\n      slidesToShow\n    } = props;\n    let result = slidesToShow || 1;\n\n    if (false && responsive) {\n      responsive.forEach(options => {\n        if (options.settings === 'unslick') {\n          return;\n        }\n\n        const {\n          matches\n        } = matchMedia(`(max-width: ${options.breakpoint}px)`);\n\n        if (matches && options.settings.slidesToShow) {\n          result = options.settings.slidesToShow;\n        }\n      });\n    }\n\n    return result;\n  }; // react-slick has a bug due to which it is initialized\n  // with the incorrect position if the RTL property is true\n  // this function returns the correct values\n\n\n  const getStartPosition = () => {\n    let {\n      infinite\n    } = props;\n    infinite = infinite === true || infinite === undefined;\n\n    if (direction === 'ltr') {\n      return 0;\n    }\n\n    const slidesToShow = getSlidesToShow();\n    const slidesCount = getSlidesCount();\n\n    if (!infinite) {\n      return Math.max(0, slidesCount - slidesToShow);\n    }\n\n    return (Math.ceil(slidesCount / slidesToShow) - 1) * slidesToShow;\n  }; // returns indexes of active slides by currentIndex\n\n\n  const getActiveSlides = currentIndex => {\n    const slidesToShow = getSlidesToShow();\n    const activeSlides = [];\n    const slidesCount = getSlidesCount();\n    const firstSlide = Math.max(0, Math.min(slidesCount - slidesToShow, currentIndex));\n    const lastSlide = Math.min(slidesCount, firstSlide + slidesToShow);\n\n    for (let i = firstSlide; i < lastSlide; i += 1) {\n      activeSlides.push(i);\n    }\n\n    return activeSlides;\n  };\n\n  const {\n    0: preventClick,\n    1: setPreventClick\n  } = useState(false);\n  const {\n    0: activeSlides,\n    1: setActiveSlides\n  } = useState(getActiveSlides(getStartPosition()));\n\n  const onMousedown = event => {\n    const downX = event.screenX;\n    const downY = event.screenY;\n    let clickPrevented = false;\n\n    const onMousemove = moveEvent => {\n      if (clickPrevented) {\n        return;\n      } // Thank you Pythagoras.\n\n\n      const distance = Math.sqrt(Math.abs(downX - moveEvent.screenX) ** 2 + Math.abs(downY - moveEvent.screenY) ** 2);\n\n      if (moveEvent.cancelable && distance > 3) {\n        moveEvent.preventDefault();\n      }\n\n      if (distance > 15) {\n        clickPrevented = true;\n        setPreventClick(clickPrevented);\n      }\n    };\n\n    const onMouseup = () => {\n      clickPrevented = false;\n      setPreventClick(clickPrevented);\n      document.removeEventListener('mousemove', onMousemove);\n      document.removeEventListener('mouseup', onMouseup);\n    };\n\n    document.addEventListener('mousemove', onMousemove);\n    document.addEventListener('mouseup', onMouseup);\n  };\n\n  const setSlickRef = useCallback(ref => {\n    if (forwardRef) {\n      if ('current' in forwardRef) {\n        forwardRef.current = ref;\n      } else {\n        forwardRef(ref);\n      }\n    }\n\n    if (ref && ref !== slickRef.current) {\n      // react-slick forgot that if the RTL parameter is true,\n      // then the next and prev methods need to be swapped, so let's do it yourself\n      originalSlickNextRef.current = ref.slickNext;\n      originalSlickPrevRef.current = ref.slickPrev; // eslint-disable-next-line no-param-reassign\n\n      ref.slickNext = () => slickNextRef.current && slickNextRef.current(); // eslint-disable-next-line no-param-reassign\n\n\n      ref.slickPrev = () => slickPrevRef.current && slickPrevRef.current();\n    }\n\n    slickRef.current = ref;\n  }, []);\n  useEffect(() => {\n    slickNextRef.current = () => {\n      originalSlickNextRef.current();\n    };\n\n    slickPrevRef.current = () => {\n      originalSlickPrevRef.current();\n    };\n  }, [direction]); // If the slides have changed, we also need to change the active slides.\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setActiveSlides(getActiveSlides(getStartPosition()));\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [children]); // Resets position when changing direction.\n\n  useEffect(() => {\n    if (slickRef.current) {\n      slickRef.current.slickGoTo(getStartPosition(), true);\n    }\n  }, [direction]);\n  const beforeChangeWrapper = useCallback((oldIndex, newIndex) => {\n    if (beforeChange) {\n      beforeChange(oldIndex, newIndex);\n    } // react-slick incorrectly adds the .slick-active class to slides\n    // if the RTL parameter is true so we will do it ourselves\n\n\n    setTimeout(() => {\n      setActiveSlides(getActiveSlides(newIndex));\n    }, 0);\n  }, [beforeChange]);\n  const classes = classNames('slick-prevent-click', {\n    'slick-prevent-click--active': preventClick\n  }); // we need to reverse slides if direction is RTL\n  // because react-slick displays them in the wrong order\n\n  let reversedChildren = React.Children.toArray(children);\n  reversedChildren = reversedChildren.map((slide, index) => {\n    // react-slick incorrectly adds the .slick-active class to slides\n    // if the RTL parameter is true so we will do it ourselves\n    const slideClasses = classNames({\n      'correct-slick-active': activeSlides.includes(index)\n    });\n    return __jsx(\"div\", {\n      key: index,\n      dir: direction,\n      className: slideClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, slide);\n  });\n  return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    __jsx(\"div\", {\n      className: classes,\n      onMouseDown: onMousedown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, __jsx(Slick, _extends({}, otherProps, {\n      beforeChange: beforeChangeWrapper,\n      ref: setSlickRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }), reversedChildren))\n  );\n}\n\nexport default React.forwardRef((props, ref) => {\n  const {\n    children\n  } = props;\n  return __jsx(StroykaSlickInner, _extends({\n    forwardRef: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }), children);\n});","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/components/shared/StroykaSlick.tsx"],"names":["React","useCallback","useEffect","useRef","useState","classNames","Slick","useDirection","StroykaSlickInner","props","children","forwardRef","beforeChange","otherProps","direction","slickRef","originalSlickNextRef","originalSlickPrevRef","slickNextRef","slickPrevRef","getSlidesCount","Children","toArray","length","getSlidesToShow","responsive","slidesToShow","result","forEach","options","settings","matches","matchMedia","breakpoint","getStartPosition","infinite","undefined","slidesCount","Math","max","ceil","getActiveSlides","currentIndex","activeSlides","firstSlide","min","lastSlide","i","push","preventClick","setPreventClick","setActiveSlides","onMousedown","event","downX","screenX","downY","screenY","clickPrevented","onMousemove","moveEvent","distance","sqrt","abs","cancelable","preventDefault","onMouseup","document","removeEventListener","addEventListener","setSlickRef","ref","current","slickNext","slickPrev","timer","setTimeout","clearTimeout","slickGoTo","beforeChangeWrapper","oldIndex","newIndex","classes","reversedChildren","map","slide","index","slideClasses","includes"],"mappings":"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","sourcesContent":["// react\nimport React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\n// third-party\nimport classNames from 'classnames';\nimport Slick, { Settings } from 'react-slick';\n\n// application\nimport { useDirection } from '../../store/locale/localeHooks';\n\nexport type SlickProps = Settings;\n\nexport type StroykaSlickProps = React.PropsWithChildren<SlickProps>;\n\nexport interface StroykaSlickInnerProps extends SlickProps {\n    children: React.ReactNode;\n    forwardRef: React.RefCallback<Slick | null> | React.MutableRefObject<Slick | null> | null;\n}\n\nfunction StroykaSlickInner(props: StroykaSlickInnerProps) {\n    const {\n        children,\n        forwardRef,\n        beforeChange,\n        ...otherProps\n    } = props;\n    const direction = useDirection();\n    const slickRef = useRef<Slick | null>(null);\n    const originalSlickNextRef = useRef<() => void>(() => {});\n    const originalSlickPrevRef = useRef<() => void>(() => {});\n    const slickNextRef = useRef<() => void>(() => {});\n    const slickPrevRef = useRef<() => void>(() => {});\n\n    const getSlidesCount = () => (\n        React.Children.toArray(children).length\n    );\n\n    const getSlidesToShow = () => {\n        const { responsive, slidesToShow } = props;\n\n        let result = slidesToShow || 1;\n\n        if (process.browser && responsive) {\n            responsive.forEach((options) => {\n                if (options.settings === 'unslick') {\n                    return;\n                }\n\n                const { matches } = matchMedia(`(max-width: ${options.breakpoint}px)`);\n\n                if (matches && options.settings.slidesToShow) {\n                    result = options.settings.slidesToShow;\n                }\n            });\n        }\n\n        return result;\n    };\n\n    // react-slick has a bug due to which it is initialized\n    // with the incorrect position if the RTL property is true\n    // this function returns the correct values\n    const getStartPosition = () => {\n        let { infinite } = props;\n\n        infinite = infinite === true || infinite === undefined;\n\n        if (direction === 'ltr') {\n            return 0;\n        }\n\n        const slidesToShow = getSlidesToShow();\n        const slidesCount = getSlidesCount();\n\n        if (!infinite) {\n            return Math.max(0, slidesCount - slidesToShow);\n        }\n\n        return (Math.ceil(slidesCount / slidesToShow) - 1) * slidesToShow;\n    };\n\n    // returns indexes of active slides by currentIndex\n    const getActiveSlides = (currentIndex: number) => {\n        const slidesToShow = getSlidesToShow();\n        const activeSlides = [];\n        const slidesCount = getSlidesCount();\n\n        const firstSlide = Math.max(\n            0,\n            Math.min(\n                slidesCount - slidesToShow,\n                currentIndex,\n            ),\n        );\n        const lastSlide = Math.min(\n            slidesCount,\n            firstSlide + slidesToShow,\n        );\n\n        for (let i = firstSlide; i < lastSlide; i += 1) {\n            activeSlides.push(i);\n        }\n\n        return activeSlides;\n    };\n\n    const [preventClick, setPreventClick] = useState(false);\n    const [activeSlides, setActiveSlides] = useState(getActiveSlides(getStartPosition()));\n\n    const onMousedown = (event: React.MouseEvent<HTMLDivElement>) => {\n        const downX = event.screenX;\n        const downY = event.screenY;\n        let clickPrevented = false;\n\n        const onMousemove = (moveEvent: MouseEvent) => {\n            if (clickPrevented) {\n                return;\n            }\n\n            // Thank you Pythagoras.\n            const distance = Math.sqrt(\n                (Math.abs(downX - moveEvent.screenX) ** 2)\n                + (Math.abs(downY - moveEvent.screenY) ** 2),\n            );\n\n            if (moveEvent.cancelable && distance > 3) {\n                moveEvent.preventDefault();\n            }\n\n            if (distance > 15) {\n                clickPrevented = true;\n                setPreventClick(clickPrevented);\n            }\n        };\n        const onMouseup = () => {\n            clickPrevented = false;\n            setPreventClick(clickPrevented);\n\n            document.removeEventListener('mousemove', onMousemove);\n            document.removeEventListener('mouseup', onMouseup);\n        };\n\n        document.addEventListener('mousemove', onMousemove);\n        document.addEventListener('mouseup', onMouseup);\n    };\n\n    const setSlickRef: React.RefCallback<Slick> = useCallback((ref) => {\n        if (forwardRef) {\n            if ('current' in forwardRef) {\n                forwardRef.current = ref;\n            } else {\n                forwardRef(ref);\n            }\n        }\n\n        if (ref && ref !== slickRef.current) {\n            // react-slick forgot that if the RTL parameter is true,\n            // then the next and prev methods need to be swapped, so let's do it yourself\n            originalSlickNextRef.current = ref.slickNext;\n            originalSlickPrevRef.current = ref.slickPrev;\n\n            // eslint-disable-next-line no-param-reassign\n            ref.slickNext = () => slickNextRef.current && slickNextRef.current();\n            // eslint-disable-next-line no-param-reassign\n            ref.slickPrev = () => slickPrevRef.current && slickPrevRef.current();\n        }\n\n        slickRef.current = ref;\n    }, []);\n\n    useEffect(() => {\n        slickNextRef.current = () => {\n            originalSlickNextRef.current();\n        };\n\n        slickPrevRef.current = () => {\n            originalSlickPrevRef.current();\n        };\n    }, [direction]);\n\n    // If the slides have changed, we also need to change the active slides.\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setActiveSlides(getActiveSlides(getStartPosition()));\n        }, 0);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [children]);\n\n    // Resets position when changing direction.\n    useEffect(() => {\n        if (slickRef.current) {\n            slickRef.current.slickGoTo(getStartPosition(), true);\n        }\n    }, [direction]);\n\n    const beforeChangeWrapper: SlickProps['beforeChange'] = useCallback((oldIndex, newIndex) => {\n        if (beforeChange) {\n            beforeChange(oldIndex, newIndex);\n        }\n\n        // react-slick incorrectly adds the .slick-active class to slides\n        // if the RTL parameter is true so we will do it ourselves\n        setTimeout(() => {\n            setActiveSlides(getActiveSlides(newIndex));\n        }, 0);\n    }, [beforeChange]);\n\n    const classes = classNames('slick-prevent-click', {\n        'slick-prevent-click--active': preventClick,\n    });\n\n    // we need to reverse slides if direction is RTL\n    // because react-slick displays them in the wrong order\n    let reversedChildren = React.Children.toArray(children);\n\n\n    reversedChildren = reversedChildren.map((slide, index) => {\n        // react-slick incorrectly adds the .slick-active class to slides\n        // if the RTL parameter is true so we will do it ourselves\n        const slideClasses = classNames({ 'correct-slick-active': activeSlides.includes(index) });\n\n        return (\n            <div key={index} dir={direction} className={slideClasses}>\n                {slide}\n            </div>\n        );\n    });\n\n    return (\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        <div\n            className={classes}\n            onMouseDown={onMousedown}\n        >\n            <Slick {...otherProps} beforeChange={beforeChangeWrapper} ref={setSlickRef}>\n                {reversedChildren}\n            </Slick>\n        </div>\n    );\n}\n\nexport default React.forwardRef<Slick, StroykaSlickProps>(\n    (props, ref) => {\n        const { children } = props;\n\n        return (\n            <StroykaSlickInner forwardRef={ref} {...props}>\n                {children}\n            </StroykaSlickInner>\n        );\n    },\n);\n"]},"metadata":{},"sourceType":"module"}