{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\n\nfunction parseValue(value) {\n  return value.split('-').map(x => parseFloat(x));\n}\n\nexport default class RangeFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"min\", 0);\n\n    _defineProperty(this, \"max\", 0);\n\n    _defineProperty(this, \"value\", [0, 0]);\n  }\n\n  test(product) {\n    const value = this.extractValue(product);\n    return value >= this.value[0] && value <= this.value[1];\n  }\n\n  makeItems(products, value) {\n    this.max = productsData.reduce((acc, product) => Math.max(acc, this.extractValue(product)), 0);\n    this.min = productsData.reduce((acc, product) => Math.min(acc, this.extractValue(product)), this.max);\n    /** Calculates the number of digits for rounding. */\n\n    let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n    digit = 10 ** digit;\n    this.max = Math.ceil(this.max / digit) * digit;\n    this.min = Math.floor(this.min / digit) * digit;\n    this.value = [this.min, this.max];\n\n    if (value) {\n      this.value = parseValue(value);\n    }\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  calc() {}\n\n  extractValue(product) {\n    if (this.slug === 'price') {\n      return product.price;\n    }\n\n    throw Error();\n  }\n\n  build() {\n    return {\n      type: 'range',\n      slug: this.slug,\n      name: this.name,\n      min: this.min,\n      max: this.max,\n      value: this.value\n    };\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/filters/range.ts"],"names":["AbstractFilterBuilder","productsData","parseValue","value","split","map","x","parseFloat","RangeFilterBuilder","test","product","extractValue","makeItems","products","max","reduce","acc","Math","min","digit","ceil","toString","length","floor","calc","slug","price","Error","build","type","name"],"mappings":";;AAAA,OAAOA,qBAAP,MAAkC,YAAlC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAAsD;AAClD,SAAOA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,CAAD,IAAOC,UAAU,CAACD,CAAD,CAAtC,CAAP;AACH;;AAED,eAAe,MAAME,kBAAN,SAAiCR,qBAAjC,CAAqE;AAAA;AAAA;;AAAA,iCAClE,CADkE;;AAAA,iCAGlE,CAHkE;;AAAA,mCAKrD,CAAC,CAAD,EAAI,CAAJ,CALqD;AAAA;;AAOhFS,EAAAA,IAAI,CAACC,OAAD,EAA6B;AAC7B,UAAMP,KAAK,GAAG,KAAKQ,YAAL,CAAkBD,OAAlB,CAAd;AAEA,WAAOP,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAAT,IAA0BA,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAA1C;AACH;;AAEDS,EAAAA,SAAS,CAACC,QAAD,EAAuBV,KAAvB,EAA6C;AAClD,SAAKW,GAAL,GAAWb,YAAY,CAACc,MAAb,CACP,CAACC,GAAD,EAAMN,OAAN,KAAkBO,IAAI,CAACH,GAAL,CAASE,GAAT,EAAc,KAAKL,YAAL,CAAkBD,OAAlB,CAAd,CADX,EAEP,CAFO,CAAX;AAIA,SAAKQ,GAAL,GAAWjB,YAAY,CAACc,MAAb,CACP,CAACC,GAAD,EAAMN,OAAN,KAAkBO,IAAI,CAACC,GAAL,CAASF,GAAT,EAAc,KAAKL,YAAL,CAAkBD,OAAlB,CAAd,CADX,EAEP,KAAKI,GAFE,CAAX;AAKA;;AACA,QAAIK,KAAK,GAAGF,IAAI,CAACH,GAAL,CAASG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAf,EAAoBO,QAApB,GAA+BC,MAA/B,GAAwC,CAAjD,EAAoD,CAApD,CAAZ;AAEAH,IAAAA,KAAK,GAAG,MAAMA,KAAd;AAEA,SAAKL,GAAL,GAAWG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAL,GAAWK,KAArB,IAA8BA,KAAzC;AACA,SAAKD,GAAL,GAAWD,IAAI,CAACM,KAAL,CAAW,KAAKL,GAAL,GAAWC,KAAtB,IAA+BA,KAA1C;AACA,SAAKhB,KAAL,GAAa,CAAC,KAAKe,GAAN,EAAW,KAAKJ,GAAhB,CAAb;;AAEA,QAAIX,KAAJ,EAAW;AACP,WAAKA,KAAL,GAAaD,UAAU,CAACC,KAAD,CAAvB;AACH;AACJ,GAnC+E,CAqChF;;;AACAqB,EAAAA,IAAI,GAAG,CAAG;;AAEVb,EAAAA,YAAY,CAACD,OAAD,EAA4B;AACpC,QAAI,KAAKe,IAAL,KAAc,OAAlB,EAA2B;AACvB,aAAOf,OAAO,CAACgB,KAAf;AACH;;AAED,UAAMC,KAAK,EAAX;AACH;;AAEDC,EAAAA,KAAK,GAAiB;AAClB,WAAO;AACHC,MAAAA,IAAI,EAAE,OADH;AAEHJ,MAAAA,IAAI,EAAE,KAAKA,IAFR;AAGHK,MAAAA,IAAI,EAAE,KAAKA,IAHR;AAIHZ,MAAAA,GAAG,EAAE,KAAKA,GAJP;AAKHJ,MAAAA,GAAG,EAAE,KAAKA,GALP;AAMHX,MAAAA,KAAK,EAAE,KAAKA;AANT,KAAP;AAQH;;AAzD+E","sourcesContent":["import AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\nimport { IRangeFilter, IRangeFilterValue } from '../../interfaces/filter';\nimport { IProduct } from '../../interfaces/product';\n\nfunction parseValue(value: string): IRangeFilterValue {\n    return value.split('-').map((x) => parseFloat(x)) as IRangeFilterValue;\n}\n\nexport default class RangeFilterBuilder extends AbstractFilterBuilder<IRangeFilter> {\n    min: number = 0;\n\n    max: number = 0;\n\n    value: IRangeFilterValue = [0, 0];\n\n    test(product: IProduct): boolean {\n        const value = this.extractValue(product);\n\n        return value >= this.value[0] && value <= this.value[1];\n    }\n\n    makeItems(products: IProduct[], value?: string): void {\n        this.max = productsData.reduce(\n            (acc, product) => Math.max(acc, this.extractValue(product)),\n            0,\n        );\n        this.min = productsData.reduce(\n            (acc, product) => Math.min(acc, this.extractValue(product)),\n            this.max,\n        );\n\n        /** Calculates the number of digits for rounding. */\n        let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n\n        digit = 10 ** digit;\n\n        this.max = Math.ceil(this.max / digit) * digit;\n        this.min = Math.floor(this.min / digit) * digit;\n        this.value = [this.min, this.max];\n\n        if (value) {\n            this.value = parseValue(value);\n        }\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    calc() { }\n\n    extractValue(product: IProduct): number {\n        if (this.slug === 'price') {\n            return product.price;\n        }\n\n        throw Error();\n    }\n\n    build(): IRangeFilter {\n        return {\n            type: 'range',\n            slug: this.slug,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}