{"ast":null,"code":"import { categoriesTreeData, categoriesListData, prepareCategory } from '../database/categories';\nexport function getCategories() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Promise.resolve(categoriesTreeData.map(function (x) {\n    return prepareCategory(x, options.depth);\n  }));\n}\nexport function getCategoryBySlug(slug) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var category = categoriesListData.find(function (x) {\n    return x.slug === slug;\n  });\n  return category ? Promise.resolve(prepareCategory(category, options.depth)) : Promise.reject();\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/endpoints/categories.ts"],"names":["categoriesTreeData","categoriesListData","prepareCategory","getCategories","options","Promise","resolve","map","x","depth","getCategoryBySlug","slug","category","find","reject"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,kBAA7B,EAAiDC,eAAjD,QAAwE,wBAAxE;AAWA,OAAO,SAASC,aAAT,GAAqF;AAAA,MAA9DC,OAA8D,uEAA9B,EAA8B;AACxF,SAAOC,OAAO,CAACC,OAAR,CACHN,kBAAkB,CAACO,GAAnB,CAAuB,UAACC,CAAD;AAAA,WAAON,eAAe,CAACM,CAAD,EAAIJ,OAAO,CAACK,KAAZ,CAAtB;AAAA,GAAvB,CADG,CAAP;AAGH;AAED,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAyG;AAAA,MAAhEP,OAAgE,uEAA5B,EAA4B;AAC5G,MAAMQ,QAAQ,GAAGX,kBAAkB,CAACY,IAAnB,CAAwB,UAACL,CAAD;AAAA,WAAOA,CAAC,CAACG,IAAF,KAAWA,IAAlB;AAAA,GAAxB,CAAjB;AAEA,SAAOC,QAAQ,GAAGP,OAAO,CAACC,OAAR,CAAgBJ,eAAe,CAACU,QAAD,EAAWR,OAAO,CAACK,KAAnB,CAA/B,CAAH,GAA+DJ,OAAO,CAACS,MAAR,EAA9E;AACH","sourcesContent":["import { categoriesTreeData, categoriesListData, prepareCategory } from '../database/categories';\nimport { IShopCategory } from '../../interfaces/category';\n\nexport interface GetCategoriesOptions {\n    depth?: number;\n}\n\nexport interface GetCategoryBySlugOptions {\n    depth?: number;\n}\n\nexport function getCategories(options: GetCategoriesOptions = {}): Promise<IShopCategory[]> {\n    return Promise.resolve(\n        categoriesTreeData.map((x) => prepareCategory(x, options.depth)),\n    );\n}\n\nexport function getCategoryBySlug(slug: string, options: GetCategoryBySlugOptions = {}): Promise<IShopCategory> {\n    const category = categoriesListData.find((x) => x.slug === slug);\n\n    return category ? Promise.resolve(prepareCategory(category, options.depth)) : Promise.reject();\n}\n"]},"metadata":{},"sourceType":"module"}