{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class AbstractFilterBuilder {\n  constructor(slug, name) {\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    this.slug = slug;\n    this.name = name;\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/filters/abstract.ts"],"names":["AbstractFilterBuilder","constructor","slug","name"],"mappings":";;AAGA,eAAe,MAAeA,qBAAf,CAA0E;AAKrFC,EAAAA,WAAW,CAACC,IAAD,EAAeC,IAAf,EAA6B;AAAA;;AAAA;;AACpC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH;;AARoF","sourcesContent":["import { IProduct } from '../../interfaces/product';\nimport { IBaseFilter } from '../../interfaces/filter';\n\nexport default abstract class AbstractFilterBuilder<T extends IBaseFilter = IBaseFilter> {\n    slug: string;\n\n    name: string;\n\n    constructor(slug: string, name: string) {\n        this.slug = slug;\n        this.name = name;\n    }\n\n    abstract test(product: IProduct): boolean;\n\n    abstract makeItems(products: IProduct[], value?: string): void;\n\n    abstract calc(filters: AbstractFilterBuilder[]): void;\n\n    abstract build(): T;\n}\n"]},"metadata":{},"sourceType":"module"}