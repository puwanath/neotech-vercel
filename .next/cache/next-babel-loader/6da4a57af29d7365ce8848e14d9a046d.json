{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar AbstractFilterBuilder = function AbstractFilterBuilder(slug, name) {\n  _classCallCheck(this, AbstractFilterBuilder);\n\n  _defineProperty(this, \"slug\", void 0);\n\n  _defineProperty(this, \"name\", void 0);\n\n  this.slug = slug;\n  this.name = name;\n};\n\nexport { AbstractFilterBuilder as default };","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/filters/abstract.ts"],"names":["AbstractFilterBuilder","slug","name"],"mappings":";;;IAG8BA,qB,GAK1B,+BAAYC,IAAZ,EAA0BC,IAA1B,EAAwC;AAAA;;AAAA;;AAAA;;AACpC,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACH,C;;SARyBF,qB","sourcesContent":["import { IProduct } from '../../interfaces/product';\nimport { IBaseFilter } from '../../interfaces/filter';\n\nexport default abstract class AbstractFilterBuilder<T extends IBaseFilter = IBaseFilter> {\n    slug: string;\n\n    name: string;\n\n    constructor(slug: string, name: string) {\n        this.slug = slug;\n        this.name = name;\n    }\n\n    abstract test(product: IProduct): boolean;\n\n    abstract makeItems(products: IProduct[], value?: string): void;\n\n    abstract calc(filters: AbstractFilterBuilder[]): void;\n\n    abstract build(): T;\n}\n"]},"metadata":{},"sourceType":"module"}