{"ast":null,"code":"// application\nimport languages from '../../i18n';\nimport { LOCALE_NAMESPACE } from './localeReducer';\nimport { localeChange } from './localeActions';\nimport { useAppAction, useAppSelector } from '../hooks';\n\nconst localeSelector = state => state[LOCALE_NAMESPACE].current;\n\nexport const useLocale = () => useAppSelector(localeSelector);\nexport function useLanguage(selector) {\n  return useAppSelector(state => {\n    const locale = localeSelector(state);\n    const language = languages.find(x => x.locale === locale);\n\n    if (!language) {\n      throw Error(`Language with locale: ${locale} not found!`);\n    }\n\n    if (selector) {\n      return selector(language);\n    }\n\n    return language;\n  });\n}\nexport const useDirection = () => useLanguage(language => language.direction);\nexport const useMessages = () => useLanguage(language => language.messages);\nexport const useLocaleChange = () => useAppAction(localeChange);","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/store/locale/localeHooks.ts"],"names":["languages","LOCALE_NAMESPACE","localeChange","useAppAction","useAppSelector","localeSelector","state","current","useLocale","useLanguage","selector","locale","language","find","x","Error","useDirection","direction","useMessages","messages","useLocaleChange"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,UAA7C;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAsBA,KAAK,CAACL,gBAAD,CAAL,CAAwBM,OAArE;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAMJ,cAAc,CAACC,cAAD,CAAtC;AAIP,OAAO,SAASI,WAAT,CAAwDC,QAAxD,EAAmG;AACtG,SAAON,cAAc,CAAEE,KAAD,IAAW;AAC7B,UAAMK,MAAM,GAAGN,cAAc,CAACC,KAAD,CAA7B;AACA,UAAMM,QAAQ,GAAGZ,SAAS,CAACa,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACH,MAAF,KAAaA,MAAnC,CAAjB;;AAEA,QAAI,CAACC,QAAL,EAAe;AACX,YAAMG,KAAK,CAAE,yBAAwBJ,MAAO,aAAjC,CAAX;AACH;;AAED,QAAID,QAAJ,EAAc;AACV,aAAOA,QAAQ,CAACE,QAAD,CAAf;AACH;;AAED,WAAOA,QAAP;AACH,GAboB,CAArB;AAcH;AAED,OAAO,MAAMI,YAAY,GAAG,MAAMP,WAAW,CAAEG,QAAD,IAAcA,QAAQ,CAACK,SAAxB,CAAtC;AAEP,OAAO,MAAMC,WAAW,GAAG,MAAMT,WAAW,CAAEG,QAAD,IAAcA,QAAQ,CAACO,QAAxB,CAArC;AAEP,OAAO,MAAMC,eAAe,GAAG,MAAMjB,YAAY,CAACD,YAAD,CAA1C","sourcesContent":["// application\nimport languages from '../../i18n';\nimport { ILanguage } from '../../interfaces/language';\nimport { LOCALE_NAMESPACE } from './localeReducer';\nimport { localeChange } from './localeActions';\nimport { RootState } from '../root/rootTypes';\nimport { useAppAction, useAppSelector } from '../hooks';\n\nconst localeSelector = (state: RootState) => state[LOCALE_NAMESPACE].current;\n\nexport const useLocale = () => useAppSelector(localeSelector);\n\nexport function useLanguage(): ILanguage;\nexport function useLanguage<T extends(lang: ILanguage) => any>(selector: T): ReturnType<T>;\nexport function useLanguage<T extends(lang: ILanguage) => any>(selector?: T): (ILanguage | ReturnType<T>) {\n    return useAppSelector((state) => {\n        const locale = localeSelector(state);\n        const language = languages.find((x) => x.locale === locale);\n\n        if (!language) {\n            throw Error(`Language with locale: ${locale} not found!`);\n        }\n\n        if (selector) {\n            return selector(language);\n        }\n\n        return language;\n    });\n}\n\nexport const useDirection = () => useLanguage((language) => language.direction);\n\nexport const useMessages = () => useLanguage((language) => language.messages);\n\nexport const useLocaleChange = () => useAppAction(localeChange);\n"]},"metadata":{},"sourceType":"module"}