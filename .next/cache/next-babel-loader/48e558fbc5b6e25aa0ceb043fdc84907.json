{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\nconst colors = [{\n  slug: 'white',\n  color: '#fff'\n}, {\n  slug: 'silver',\n  color: '#d9d9d9'\n}, {\n  slug: 'light-gray',\n  color: '#b3b3b3'\n}, {\n  slug: 'gray',\n  color: '#808080'\n}, {\n  slug: 'dark-gray',\n  color: '#666'\n}, {\n  slug: 'coal',\n  color: '#4d4d4d'\n}, {\n  slug: 'black',\n  color: '#262626'\n}, {\n  slug: 'red',\n  color: '#ff4040'\n}, {\n  slug: 'orange',\n  color: '#ff8126'\n}, {\n  slug: 'yellow',\n  color: '#ffd333'\n}, {\n  slug: 'pear-green',\n  color: '#becc1f'\n}, {\n  slug: 'green',\n  color: '#8fcc14'\n}, {\n  slug: 'emerald',\n  color: '#47cc5e'\n}, {\n  slug: 'shamrock',\n  color: '#47cca0'\n}, {\n  slug: 'shakespeare',\n  color: '#47cccc'\n}, {\n  slug: 'blue',\n  color: '#40bfff'\n}, {\n  slug: 'dark-blue',\n  color: '#3d6dcc'\n}, {\n  slug: 'violet',\n  color: '#7766cc'\n}, {\n  slug: 'purple',\n  color: '#b852cc'\n}, {\n  slug: 'cerise',\n  color: '#e53981'\n}];\n\nfunction getColorCode(slug) {\n  const result = colors.find(x => x.slug === slug);\n  return result ? result.color : '#000';\n}\n\nfunction parseValue(value) {\n  return value ? value.split(',') : [];\n}\n\nexport default class ColorFilterBuilder extends AbstractFilterBuilder {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"items\", []);\n\n    _defineProperty(this, \"value\", []);\n  }\n\n  test(product) {\n    if (this.value.length === 0) {\n      return true;\n    }\n\n    return this.value.reduce((result, value) => result || this.extractItems(product).map(x => x.slug).includes(value), false);\n  }\n\n  makeItems(products, value) {\n    products.forEach(product => this.extractItems(product).forEach(item => {\n      if (!this.items.find(x => x.slug === item.slug)) {\n        this.items.push(item);\n      }\n    }));\n    this.value = parseValue(value);\n  }\n\n  calc(filters) {\n    const products = productsData.filter(product => filters.reduce((isMatched, filter) => isMatched && (filter === this || filter.test(product)), true));\n    this.items = this.items.map(item => {\n      const count = products.reduce((acc, product) => {\n        const match = this.extractItems(product).map(x => x.slug).includes(item.slug);\n        return acc + (match ? 1 : 0);\n      }, 0);\n      return _objectSpread(_objectSpread({}, item), {}, {\n        count\n      });\n    }).sort((a, b) => colors.findIndex(x => x.slug === a.slug) - colors.findIndex(x => x.slug === b.slug));\n  }\n\n  build() {\n    return {\n      type: 'color',\n      slug: this.slug,\n      name: this.name,\n      items: this.items,\n      value: this.value\n    };\n  }\n\n  extractItems(product) {\n    const attribute = product.attributes.find(x => x.slug === this.slug);\n\n    if (!attribute) {\n      return [];\n    }\n\n    return attribute.values.map(value => ({\n      slug: value.slug,\n      name: value.name,\n      color: getColorCode(value.slug),\n      count: 0\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/filters/color.ts"],"names":["AbstractFilterBuilder","productsData","colors","slug","color","getColorCode","result","find","x","parseValue","value","split","ColorFilterBuilder","test","product","length","reduce","extractItems","map","includes","makeItems","products","forEach","item","items","push","calc","filters","filter","isMatched","count","acc","match","sort","a","b","findIndex","build","type","name","attribute","attributes","values"],"mappings":"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","sourcesContent":["import AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\nimport { IColorFilter, IColorFilterItem, IColorFilterValue } from '../../interfaces/filter';\nimport { IProduct } from '../../interfaces/product';\n\nconst colors = [\n    { slug: 'white', color: '#fff' },\n    { slug: 'silver', color: '#d9d9d9' },\n    { slug: 'light-gray', color: '#b3b3b3' },\n    { slug: 'gray', color: '#808080' },\n    { slug: 'dark-gray', color: '#666' },\n    { slug: 'coal', color: '#4d4d4d' },\n    { slug: 'black', color: '#262626' },\n    { slug: 'red', color: '#ff4040' },\n    { slug: 'orange', color: '#ff8126' },\n    { slug: 'yellow', color: '#ffd333' },\n    { slug: 'pear-green', color: '#becc1f' },\n    { slug: 'green', color: '#8fcc14' },\n    { slug: 'emerald', color: '#47cc5e' },\n    { slug: 'shamrock', color: '#47cca0' },\n    { slug: 'shakespeare', color: '#47cccc' },\n    { slug: 'blue', color: '#40bfff' },\n    { slug: 'dark-blue', color: '#3d6dcc' },\n    { slug: 'violet', color: '#7766cc' },\n    { slug: 'purple', color: '#b852cc' },\n    { slug: 'cerise', color: '#e53981' },\n];\n\nfunction getColorCode(slug: string): string {\n    const result = colors.find((x) => x.slug === slug);\n\n    return result ? result.color : '#000';\n}\n\nfunction parseValue(value?: string): IColorFilterValue {\n    return value ? value.split(',') : [];\n}\n\nexport default class ColorFilterBuilder extends AbstractFilterBuilder<IColorFilter> {\n    items: IColorFilterItem[] = [];\n\n    value: IColorFilterValue = [];\n\n    test(product: IProduct): boolean {\n        if (this.value.length === 0) {\n            return true;\n        }\n\n        return this.value.reduce<boolean>((result, value) => (\n            result || this.extractItems(product).map((x) => x.slug).includes(value)\n        ), false);\n    }\n\n    makeItems(products: IProduct[], value?: string): void {\n        products.forEach((product) => this.extractItems(product).forEach((item) => {\n            if (!this.items.find((x) => x.slug === item.slug)) {\n                this.items.push(item);\n            }\n        }));\n\n        this.value = parseValue(value);\n    }\n\n    calc(filters: AbstractFilterBuilder[]): void {\n        const products = productsData.filter(\n            (product) => filters.reduce<boolean>(\n                (isMatched, filter) => isMatched && (filter === this || filter.test(product)),\n                true,\n            ),\n        );\n\n        this.items = this.items.map((item) => {\n            const count = products.reduce((acc, product) => {\n                const match = this.extractItems(product).map((x) => x.slug).includes(item.slug);\n\n                return acc + (match ? 1 : 0);\n            }, 0);\n\n            return { ...item, count };\n        }).sort((a, b) => (\n            colors.findIndex((x) => x.slug === a.slug) - colors.findIndex((x) => x.slug === b.slug)\n        ));\n    }\n\n    build(): IColorFilter {\n        return {\n            type: 'color',\n            slug: this.slug,\n            name: this.name,\n            items: this.items,\n            value: this.value,\n        };\n    }\n\n    extractItems(product: IProduct): IColorFilterItem[] {\n        const attribute = product.attributes.find((x) => x.slug === this.slug);\n\n        if (!attribute) {\n            return [];\n        }\n\n        return attribute.values.map((value) => ({\n            slug: value.slug,\n            name: value.name,\n            color: getColorCode(value.slug),\n            count: 0,\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}