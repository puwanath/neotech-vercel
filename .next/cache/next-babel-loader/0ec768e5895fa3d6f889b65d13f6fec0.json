{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\n\nfunction parseValue(value) {\n  return value.split('-').map(function (x) {\n    return parseFloat(x);\n  });\n}\n\nvar RangeFilterBuilder = /*#__PURE__*/function (_AbstractFilterBuilde) {\n  _inherits(RangeFilterBuilder, _AbstractFilterBuilde);\n\n  var _super = _createSuper(RangeFilterBuilder);\n\n  function RangeFilterBuilder() {\n    var _this;\n\n    _classCallCheck(this, RangeFilterBuilder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"min\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"max\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"value\", [0, 0]);\n\n    return _this;\n  }\n\n  _createClass(RangeFilterBuilder, [{\n    key: \"test\",\n    value: function test(product) {\n      var value = this.extractValue(product);\n      return value >= this.value[0] && value <= this.value[1];\n    }\n  }, {\n    key: \"makeItems\",\n    value: function makeItems(products, value) {\n      var _this2 = this;\n\n      this.max = productsData.reduce(function (acc, product) {\n        return Math.max(acc, _this2.extractValue(product));\n      }, 0);\n      this.min = productsData.reduce(function (acc, product) {\n        return Math.min(acc, _this2.extractValue(product));\n      }, this.max);\n      /** Calculates the number of digits for rounding. */\n\n      var digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n      digit = Math.pow(10, digit);\n      this.max = Math.ceil(this.max / digit) * digit;\n      this.min = Math.floor(this.min / digit) * digit;\n      this.value = [this.min, this.max];\n\n      if (value) {\n        this.value = parseValue(value);\n      }\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"calc\",\n    value: function calc() {}\n  }, {\n    key: \"extractValue\",\n    value: function extractValue(product) {\n      if (this.slug === 'price') {\n        return product.price;\n      }\n\n      throw Error();\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      return {\n        type: 'range',\n        slug: this.slug,\n        name: this.name,\n        min: this.min,\n        max: this.max,\n        value: this.value\n      };\n    }\n  }]);\n\n  return RangeFilterBuilder;\n}(AbstractFilterBuilder);\n\nexport { RangeFilterBuilder as default };","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/fake-server/filters/range.ts"],"names":["AbstractFilterBuilder","productsData","parseValue","value","split","map","x","parseFloat","RangeFilterBuilder","product","extractValue","products","max","reduce","acc","Math","min","digit","ceil","toString","length","floor","slug","price","Error","type","name"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,qBAAP,MAAkC,YAAlC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAAsD;AAClD,SAAOA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqB,UAACC,CAAD;AAAA,WAAOC,UAAU,CAACD,CAAD,CAAjB;AAAA,GAArB,CAAP;AACH;;IAEoBE,kB;;;;;;;;;;;;;;;;0DACH,C;;0DAEA,C;;4DAEa,CAAC,CAAD,EAAI,CAAJ,C;;;;;;;yBAEtBC,O,EAA4B;AAC7B,UAAMN,KAAK,GAAG,KAAKO,YAAL,CAAkBD,OAAlB,CAAd;AAEA,aAAON,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAAT,IAA0BA,KAAK,IAAI,KAAKA,KAAL,CAAW,CAAX,CAA1C;AACH;;;8BAESQ,Q,EAAsBR,K,EAAsB;AAAA;;AAClD,WAAKS,GAAL,GAAWX,YAAY,CAACY,MAAb,CACP,UAACC,GAAD,EAAML,OAAN;AAAA,eAAkBM,IAAI,CAACH,GAAL,CAASE,GAAT,EAAc,MAAI,CAACJ,YAAL,CAAkBD,OAAlB,CAAd,CAAlB;AAAA,OADO,EAEP,CAFO,CAAX;AAIA,WAAKO,GAAL,GAAWf,YAAY,CAACY,MAAb,CACP,UAACC,GAAD,EAAML,OAAN;AAAA,eAAkBM,IAAI,CAACC,GAAL,CAASF,GAAT,EAAc,MAAI,CAACJ,YAAL,CAAkBD,OAAlB,CAAd,CAAlB;AAAA,OADO,EAEP,KAAKG,GAFE,CAAX;AAKA;;AACA,UAAIK,KAAK,GAAGF,IAAI,CAACH,GAAL,CAASG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAf,EAAoBO,QAApB,GAA+BC,MAA/B,GAAwC,CAAjD,EAAoD,CAApD,CAAZ;AAEAH,MAAAA,KAAK,YAAG,EAAH,EAASA,KAAT,CAAL;AAEA,WAAKL,GAAL,GAAWG,IAAI,CAACG,IAAL,CAAU,KAAKN,GAAL,GAAWK,KAArB,IAA8BA,KAAzC;AACA,WAAKD,GAAL,GAAWD,IAAI,CAACM,KAAL,CAAW,KAAKL,GAAL,GAAWC,KAAtB,IAA+BA,KAA1C;AACA,WAAKd,KAAL,GAAa,CAAC,KAAKa,GAAN,EAAW,KAAKJ,GAAhB,CAAb;;AAEA,UAAIT,KAAJ,EAAW;AACP,aAAKA,KAAL,GAAaD,UAAU,CAACC,KAAD,CAAvB;AACH;AACJ,K,CAED;;;;2BACO,CAAG;;;iCAEGM,O,EAA2B;AACpC,UAAI,KAAKa,IAAL,KAAc,OAAlB,EAA2B;AACvB,eAAOb,OAAO,CAACc,KAAf;AACH;;AAED,YAAMC,KAAK,EAAX;AACH;;;4BAEqB;AAClB,aAAO;AACHC,QAAAA,IAAI,EAAE,OADH;AAEHH,QAAAA,IAAI,EAAE,KAAKA,IAFR;AAGHI,QAAAA,IAAI,EAAE,KAAKA,IAHR;AAIHV,QAAAA,GAAG,EAAE,KAAKA,GAJP;AAKHJ,QAAAA,GAAG,EAAE,KAAKA,GALP;AAMHT,QAAAA,KAAK,EAAE,KAAKA;AANT,OAAP;AAQH;;;;EAzD2CH,qB;;SAA3BQ,kB","sourcesContent":["import AbstractFilterBuilder from './abstract';\nimport productsData from '../database/products';\nimport { IRangeFilter, IRangeFilterValue } from '../../interfaces/filter';\nimport { IProduct } from '../../interfaces/product';\n\nfunction parseValue(value: string): IRangeFilterValue {\n    return value.split('-').map((x) => parseFloat(x)) as IRangeFilterValue;\n}\n\nexport default class RangeFilterBuilder extends AbstractFilterBuilder<IRangeFilter> {\n    min: number = 0;\n\n    max: number = 0;\n\n    value: IRangeFilterValue = [0, 0];\n\n    test(product: IProduct): boolean {\n        const value = this.extractValue(product);\n\n        return value >= this.value[0] && value <= this.value[1];\n    }\n\n    makeItems(products: IProduct[], value?: string): void {\n        this.max = productsData.reduce(\n            (acc, product) => Math.max(acc, this.extractValue(product)),\n            0,\n        );\n        this.min = productsData.reduce(\n            (acc, product) => Math.min(acc, this.extractValue(product)),\n            this.max,\n        );\n\n        /** Calculates the number of digits for rounding. */\n        let digit = Math.max(Math.ceil(this.max).toString().length - 2, 1);\n\n        digit = 10 ** digit;\n\n        this.max = Math.ceil(this.max / digit) * digit;\n        this.min = Math.floor(this.min / digit) * digit;\n        this.value = [this.min, this.max];\n\n        if (value) {\n            this.value = parseValue(value);\n        }\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    calc() { }\n\n    extractValue(product: IProduct): number {\n        if (this.slug === 'price') {\n            return product.price;\n        }\n\n        throw Error();\n    }\n\n    build(): IRangeFilter {\n        return {\n            type: 'range',\n            slug: this.slug,\n            name: this.name,\n            min: this.min,\n            max: this.max,\n            value: this.value,\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}