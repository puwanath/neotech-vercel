{"ast":null,"code":"// third-party\nimport { toast } from 'react-toastify'; // application\n\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_UPDATE_QUANTITIES } from './cartActionTypes';\nexport function cartAddItemSuccess(product) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  toast.success(\"Product \\\"\".concat(product.name, \"\\\" added to cart!\"));\n  return {\n    type: CART_ADD_ITEM,\n    product: product,\n    options: options,\n    quantity: quantity\n  };\n}\nexport function cartRemoveItemSuccess(itemId) {\n  return {\n    type: CART_REMOVE_ITEM,\n    itemId: itemId\n  };\n}\nexport function cartUpdateQuantitiesSuccess(quantities) {\n  return {\n    type: CART_UPDATE_QUANTITIES,\n    quantities: quantities\n  };\n}\nexport function cartAddItem(product) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var quantity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartAddItemSuccess(product, options, quantity));\n        resolve();\n      }, 500);\n    });\n  };\n}\nexport function cartRemoveItem(itemId) {\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartRemoveItemSuccess(itemId));\n        resolve();\n      }, 500);\n    });\n  };\n}\nexport function cartUpdateQuantities(quantities) {\n  // sending request to server, timeout is used as a stub\n  return function (dispatch) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        dispatch(cartUpdateQuantitiesSuccess(quantities));\n        resolve();\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/store/cart/cartActions.ts"],"names":["toast","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_UPDATE_QUANTITIES","cartAddItemSuccess","product","options","quantity","success","name","type","cartRemoveItemSuccess","itemId","cartUpdateQuantitiesSuccess","quantities","cartAddItem","dispatch","Promise","resolve","setTimeout","cartRemoveItem","cartUpdateQuantities"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB,C,CAEA;;AAGA,SACIC,aADJ,EAEIC,gBAFJ,EAGIC,sBAHJ,QASO,mBATP;AAWA,OAAO,SAASC,kBAAT,CACHC,OADG,EAIc;AAAA,MAFjBC,OAEiB,uEAFW,EAEX;AAAA,MADjBC,QACiB,uEADN,CACM;AACjBP,EAAAA,KAAK,CAACQ,OAAN,qBAA0BH,OAAO,CAACI,IAAlC;AAEA,SAAO;AACHC,IAAAA,IAAI,EAAET,aADH;AAEHI,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,QAAQ,EAARA;AAJG,GAAP;AAMH;AAED,OAAO,SAASI,qBAAT,CAA+BC,MAA/B,EAAqE;AACxE,SAAO;AACHF,IAAAA,IAAI,EAAER,gBADH;AAEHU,IAAAA,MAAM,EAANA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,2BAAT,CAAqCC,UAArC,EAAiG;AACpG,SAAO;AACHJ,IAAAA,IAAI,EAAEP,sBADH;AAEHW,IAAAA,UAAU,EAAVA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,WAAT,CACHV,OADG,EAI2B;AAAA,MAF9BC,OAE8B,uEAFF,EAEE;AAAA,MAD9BC,QAC8B,uEADnB,CACmB;AAC9B;AACA,SAAO,UAACS,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACZ,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmBC,QAAnB,CAAnB,CAAR;AACAW,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH;AAED,OAAO,SAASE,cAAT,CAAwBR,MAAxB,EAAwE;AAC3E;AACA,SAAO,UAACI,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACL,qBAAqB,CAACC,MAAD,CAAtB,CAAR;AACAM,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH;AAED,OAAO,SAASG,oBAAT,CAA8BP,UAA9B,EAA8F;AACjG;AACA,SAAO,UAACE,QAAD;AAAA,WACH,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACrBC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,QAAQ,CAACH,2BAA2B,CAACC,UAAD,CAA5B,CAAR;AACAI,QAAAA,OAAO;AACV,OAHS,EAGP,GAHO,CAAV;AAIH,KALD,CADG;AAAA,GAAP;AAQH","sourcesContent":["// third-party\nimport { toast } from 'react-toastify';\n\n// application\nimport { IProduct } from '../../interfaces/product';\nimport { CartItemOption } from './cartTypes';\nimport {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_UPDATE_QUANTITIES,\n    CartAddItemAction,\n    CartItemQuantity,\n    CartRemoveItemAction,\n    CartThunkAction,\n    CartUpdateQuantitiesAction,\n} from './cartActionTypes';\n\nexport function cartAddItemSuccess(\n    product: IProduct,\n    options: CartItemOption[] = [],\n    quantity = 1,\n): CartAddItemAction {\n    toast.success(`Product \"${product.name}\" added to cart!`);\n\n    return {\n        type: CART_ADD_ITEM,\n        product,\n        options,\n        quantity,\n    };\n}\n\nexport function cartRemoveItemSuccess(itemId: number): CartRemoveItemAction {\n    return {\n        type: CART_REMOVE_ITEM,\n        itemId,\n    };\n}\n\nexport function cartUpdateQuantitiesSuccess(quantities: CartItemQuantity[]): CartUpdateQuantitiesAction {\n    return {\n        type: CART_UPDATE_QUANTITIES,\n        quantities,\n    };\n}\n\nexport function cartAddItem(\n    product: IProduct,\n    options: CartItemOption[] = [],\n    quantity = 1,\n): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartAddItemSuccess(product, options, quantity));\n                resolve();\n            }, 500);\n        })\n    );\n}\n\nexport function cartRemoveItem(itemId: number): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartRemoveItemSuccess(itemId));\n                resolve();\n            }, 500);\n        })\n    );\n}\n\nexport function cartUpdateQuantities(quantities: CartItemQuantity[]): CartThunkAction<Promise<void>> {\n    // sending request to server, timeout is used as a stub\n    return (dispatch) => (\n        new Promise((resolve) => {\n            setTimeout(() => {\n                dispatch(cartUpdateQuantitiesSuccess(quantities));\n                resolve();\n            }, 500);\n        })\n    );\n}\n"]},"metadata":{},"sourceType":"module"}