{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\neo.co.th\\\\nextapp\\\\src\\\\components\\\\header\\\\Indicator.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// react\nimport React, { Component } from 'react'; // third-party\n\nimport classNames from 'classnames'; // application\n\nimport AppLink from '../shared/AppLink';\n\nclass Indicator extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"wrapperRef\", React.createRef());\n\n    _defineProperty(this, \"handleOutsideClick\", event => {\n      const {\n        open\n      } = this.state;\n\n      if (this.wrapperRef.current && !this.wrapperRef.current.contains(event.target) && open) {\n        this.close();\n      }\n    });\n\n    _defineProperty(this, \"handleButtonClick\", event => {\n      const {\n        onClick,\n        dropdown\n      } = this.props;\n\n      if (dropdown) {\n        event.preventDefault();\n      }\n\n      this.toggle();\n\n      if (onClick) {\n        onClick(event);\n      }\n    });\n\n    this.state = {\n      open: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleOutsideClick);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      open\n    } = this.state;\n    const {\n      onOpen,\n      onClose\n    } = this.props;\n\n    if (open !== prevState.open) {\n      if (open && onOpen) {\n        onOpen();\n      }\n\n      if (!open && onClose) {\n        onClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleOutsideClick);\n  }\n\n  toggle() {\n    this.setState(state => ({\n      open: !state.open\n    }));\n  }\n\n  open() {\n    this.setState(() => ({\n      open: true\n    }));\n  }\n\n  close() {\n    this.setState(() => ({\n      open: false\n    }));\n  }\n\n  render() {\n    const {\n      open\n    } = this.state;\n    const {\n      url,\n      className,\n      icon\n    } = this.props;\n    const {\n      value,\n      dropdown\n    } = this.props;\n    let buttonElement;\n    let dropdownElement;\n\n    const title = __jsx(\"span\", {\n      className: \"indicator__area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, icon, value !== undefined && __jsx(\"span\", {\n      className: \"indicator__value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, value));\n\n    if (url) {\n      buttonElement = __jsx(AppLink, {\n        href: url,\n        className: \"indicator__button\",\n        onClick: this.handleButtonClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, title);\n    } else {\n      buttonElement = __jsx(\"button\", {\n        type: \"button\",\n        className: \"indicator__button\",\n        onClick: this.handleButtonClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, title);\n    }\n\n    if (dropdown) {\n      dropdownElement = __jsx(\"div\", {\n        className: \"indicator__dropdown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, dropdown);\n    }\n\n    const classes = classNames(`indicator indicator--trigger--click ${className}`, {\n      'indicator--opened': open\n    });\n    return __jsx(\"div\", {\n      className: classes,\n      ref: this.wrapperRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, buttonElement, dropdownElement);\n  }\n\n}\n\nexport default Indicator;","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/components/header/Indicator.tsx"],"names":["React","Component","classNames","AppLink","Indicator","constructor","props","createRef","event","open","state","wrapperRef","current","contains","target","close","onClick","dropdown","preventDefault","toggle","componentDidMount","document","addEventListener","handleOutsideClick","componentDidUpdate","prevProps","prevState","onOpen","onClose","componentWillUnmount","removeEventListener","setState","render","url","className","icon","value","buttonElement","dropdownElement","title","undefined","handleButtonClick","classes"],"mappings":"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","sourcesContent":["// react\nimport React, { Component } from 'react';\n\n// third-party\nimport classNames from 'classnames';\n\n// application\nimport AppLink from '../shared/AppLink';\nimport { ILinkProps } from '../../interfaces/menus/link-props';\n\nexport interface IndicatorProps {\n    value?: number;\n    dropdown?: React.ReactNode;\n    icon?: React.ReactNode;\n    url?: string | ILinkProps;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => void;\n    onOpen?: () => void;\n    onClose?: () => void;\n}\n\nexport interface IndicatorState {\n    open: boolean;\n}\n\nclass Indicator extends Component<IndicatorProps, IndicatorState> {\n    wrapperRef = React.createRef<HTMLDivElement>();\n\n    constructor(props: IndicatorProps) {\n        super(props);\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    componentDidUpdate(prevProps: IndicatorProps, prevState: IndicatorState) {\n        const { open } = this.state;\n        const { onOpen, onClose } = this.props;\n\n        if (open !== prevState.open) {\n            if (open && onOpen) {\n                onOpen();\n            }\n            if (!open && onClose) {\n                onClose();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleOutsideClick);\n    }\n\n    handleOutsideClick = (event: MouseEvent) => {\n        const { open } = this.state;\n\n        if (this.wrapperRef.current && !this.wrapperRef.current.contains(event.target as HTMLElement) && open) {\n            this.close();\n        }\n    };\n\n    handleButtonClick = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n        const { onClick, dropdown } = this.props;\n\n        if (dropdown) {\n            event.preventDefault();\n        }\n\n        this.toggle();\n\n        if (onClick) {\n            onClick(event);\n        }\n    };\n\n    toggle() {\n        this.setState((state) => ({\n            open: !state.open,\n        }));\n    }\n\n    open() {\n        this.setState(() => ({\n            open: true,\n        }));\n    }\n\n    close() {\n        this.setState(() => ({\n            open: false,\n        }));\n    }\n\n    render() {\n        const { open } = this.state;\n        const { url, className, icon } = this.props;\n        const { value, dropdown } = this.props;\n        let buttonElement;\n        let dropdownElement;\n\n        const title = (\n            <span className=\"indicator__area\">\n                {icon}\n                {value !== undefined && <span className=\"indicator__value\">{value}</span>}\n            </span>\n        );\n\n        if (url) {\n            buttonElement = (\n                <AppLink href={url} className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </AppLink>\n            );\n        } else {\n            buttonElement = (\n                <button type=\"button\" className=\"indicator__button\" onClick={this.handleButtonClick}>\n                    {title}\n                </button>\n            );\n        }\n\n        if (dropdown) {\n            dropdownElement = (\n                <div className=\"indicator__dropdown\">\n                    {dropdown}\n                </div>\n            );\n        }\n\n        const classes = classNames(`indicator indicator--trigger--click ${className}`, {\n            'indicator--opened': open,\n        });\n\n        return (\n            <div className={classes} ref={this.wrapperRef}>\n                {buttonElement}\n                {dropdownElement}\n            </div>\n        );\n    }\n}\n\nexport default Indicator;\n"]},"metadata":{},"sourceType":"module"}