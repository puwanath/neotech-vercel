{"ast":null,"code":"// third-party\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createWrapper } from 'next-redux-wrapper'; // application\n\nimport rootReducer from './root/rootReducer';\nimport version from './version';\nexport var save = function save(state) {\n  try {\n    localStorage.setItem('state', JSON.stringify(state));\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n};\nexport var load = function load() {\n  if (!true) {\n    return undefined;\n  }\n\n  var state;\n\n  try {\n    state = localStorage.getItem('state');\n\n    if (typeof state === 'string') {\n      state = JSON.parse(state);\n    }\n\n    if (state && state.version !== version) {\n      state = undefined;\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  return state || undefined;\n}; // create a makeStore function\n\nvar makeStore = function makeStore() {\n  return createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/store/store.ts"],"names":["thunk","applyMiddleware","createStore","composeWithDevTools","createWrapper","rootReducer","version","save","state","localStorage","setItem","JSON","stringify","error","console","load","undefined","getItem","parse","makeStore","wrapper"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAAoBC,aAApB,QAAyC,oBAAzC,C,CACA;;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAIA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAgB;AAChC,MAAI;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAA9B;AACH,GAFD,CAEE,OAAOK,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,CAPM;AASP,OAAO,IAAME,IAAI,GAAG,SAAPA,IAAO,GAAM;AACtB,MAAI,KAAJ,EAAsB;AAClB,WAAOC,SAAP;AACH;;AAED,MAAIR,KAAJ;;AAEA,MAAI;AACAA,IAAAA,KAAK,GAAGC,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAR;;AAEA,QAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;AAC3BA,MAAAA,KAAK,GAAGG,IAAI,CAACO,KAAL,CAAWV,KAAX,CAAR;AACH;;AAED,QAAIA,KAAK,IAAIA,KAAK,CAACF,OAAN,KAAkBA,OAA/B,EAAwC;AACpCE,MAAAA,KAAK,GAAGQ,SAAR;AACH;AACJ,GAVD,CAUE,OAAOH,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;;AAED,SAAOL,KAAK,IAAIQ,SAAhB;AACH,CAvBM,C,CAyBP;;AACA,IAAMG,SAA+B,GAAG,SAAlCA,SAAkC;AAAA,SACpCjB,WAAW,CAACG,WAAD,EAAcF,mBAAmB,CACxCF,eAAe,CAACD,KAAD,CADyB,CAAjC,CADyB;AAAA,CAAxC,C,CAMA;;;AACA,OAAO,IAAMoB,OAAO,GAAGhB,aAAa,CAAYe,SAAZ,CAA7B","sourcesContent":["// third-party\nimport thunk from 'redux-thunk';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { MakeStore, createWrapper } from 'next-redux-wrapper';\n// application\nimport rootReducer from './root/rootReducer';\nimport version from './version';\nimport { FirstArgType } from './types';\nimport { RootState } from './root/rootTypes';\n\nexport const save = (state: any) => {\n    try {\n        localStorage.setItem('state', JSON.stringify(state));\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n};\n\nexport const load = () => {\n    if (!process.browser) {\n        return undefined;\n    }\n\n    let state;\n\n    try {\n        state = localStorage.getItem('state');\n\n        if (typeof state === 'string') {\n            state = JSON.parse(state);\n        }\n\n        if (state && state.version !== version) {\n            state = undefined;\n        }\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n\n    return state || undefined;\n};\n\n// create a makeStore function\nconst makeStore: MakeStore<RootState> = () => (\n    createStore(rootReducer, composeWithDevTools(\n        applyMiddleware(thunk),\n    ))\n);\n\n// export an assembled wrapper\nexport const wrapper = createWrapper<RootState>(makeStore);\n\nexport type GetServerSidePropsContext = FirstArgType<FirstArgType<typeof wrapper.getServerSideProps>>\n"]},"metadata":{},"sourceType":"module"}