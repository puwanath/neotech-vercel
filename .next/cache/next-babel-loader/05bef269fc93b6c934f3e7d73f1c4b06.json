{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars,arrow-body-style */\n// noinspection ES6UnusedImports\nimport { getCategories, getCategoryBySlug } from '../fake-server/endpoints/categories';\nimport { getDiscountedProducts, getFeaturedProducts, getLatestProducts, getPopularProducts, getProductBySlug, getProductsList, getRelatedProducts, getSuggestions, getTopRatedProducts } from '../fake-server/endpoints/products';\nconst shopApi = {\n  /**\n   * Returns array of categories.\n   */\n  getCategories: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/categories.json?depth=2\n     *\n     * where:\n     * - 2 = options.depth\n     */\n    // return fetch(`https://example.com/api/categories.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getCategories(options);\n  },\n\n  /**\n   * Returns category by slug.\n   */\n  getCategoryBySlug: (slug, options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/categories/power-tools.json?depth=2\n     *\n     * where:\n     * - power-tools = slug\n     * - 2           = options.depth\n     */\n    // return fetch(`https://example.com/api/categories/${slug}.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getCategoryBySlug(slug, options);\n  },\n\n  /**\n   * Returns product.\n   */\n  getProductBySlug: slug => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/products/screwdriver-a2017.json\n     *\n     * where:\n     * - screwdriver-a2017 = slug\n     */\n    // return fetch(`https://example.com/api/products/${slug}.json`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getProductBySlug(slug);\n  },\n\n  /**\n   * Returns array of related products.\n   */\n  getRelatedProducts: (slug, options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/products/screwdriver-a2017/related.json&limit=3\n     *\n     * where:\n     * - screwdriver-a2017 = slug\n     * - limit             = options.limit\n     */\n    // return fetch(`https://example.com/api/products/${slug}/related.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getRelatedProducts(slug, options);\n  },\n\n  /**\n   * Return products list.\n   */\n  getProductsList: (options = {}, filters = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/products.json?page=2&limit=12&sort=name_desc&filter_category=screwdriwers&filter_price=500-1000\n     *\n     * where:\n     * - page            = options.page\n     * - limit           = options.limit\n     * - sort            = options.sort\n     * - filter_category = filters.category\n     * - filter_price    = filters.price\n     */\n    // const params = { ...options };\n    //\n    // Object.keys(filters).forEach((slug) => {\n    //     params[`filter_${slug}`] = filters[slug];\n    // });\n    //\n    // return fetch(`https://example.com/api/products.json?${qs.stringify(params)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getProductsList(options, filters);\n  },\n\n  /**\n   * Returns array of featured products.\n   */\n  getFeaturedProducts: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/featured-products.json?limit=3&category=power-tools\n     *\n     * where:\n     * - 3           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/featured-products.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getFeaturedProducts(options);\n  },\n\n  /**\n   * Returns array of latest products.\n   */\n  getLatestProducts: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/latest-products.json?limit=3&category=power-tools\n     *\n     * where:\n     * - 3           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/latest-products.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getLatestProducts(options);\n  },\n\n  /**\n   * Returns an array of top rated products.\n   */\n  getTopRatedProducts: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/top-rated-products.json?limit=3&category=power-tools\n     *\n     * where:\n     * - 3           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/top-rated-products.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getTopRatedProducts(options);\n  },\n\n  /**\n   * Returns an array of discounted products.\n   */\n  getDiscountedProducts: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/discounted-products.json?limit=3&category=power-tools\n     *\n     * where:\n     * - 3           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/discounted-products.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getDiscountedProducts(options);\n  },\n\n  /**\n   * Returns an array of most popular products.\n   */\n  getPopularProducts: (options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/shop/popular-products.json?limit=3&category=power-tools\n     *\n     * where:\n     * - 3           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/popular-products.json?${qs.stringify(options)}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getPopularProducts(options);\n  },\n\n  /**\n   * Returns search suggestions.\n   */\n  getSuggestions: (query, options = {}) => {\n    /**\n     * This is what your API endpoint might look like:\n     *\n     * https://example.com/api/search/suggestions.json?query=screwdriver&limit=5&category=power-tools\n     *\n     * where:\n     * - screwdriver = query\n     * - 5           = options.limit\n     * - power-tools = options.category\n     */\n    // return fetch(`https://example.com/api/search/suggestions.json?${qs.stringify({ ...options, query })}`)\n    //     .then((response) => response.json());\n    // This is for demonstration purposes only. Remove it and use the code above.\n    return getSuggestions(query, options);\n  }\n};\nexport default shopApi;","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/api/shop.ts"],"names":["getCategories","getCategoryBySlug","getDiscountedProducts","getFeaturedProducts","getLatestProducts","getPopularProducts","getProductBySlug","getProductsList","getRelatedProducts","getSuggestions","getTopRatedProducts","shopApi","options","slug","filters","query"],"mappings":"AAAA;AACA;AAEA,SAASA,aAAT,EAAwBC,iBAAxB,QAAiD,qCAAjD;AAIA,SACIC,qBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,EAIIC,kBAJJ,EAKIC,gBALJ,EAMIC,eANJ,EAOIC,kBAPJ,EAQIC,cARJ,EASIC,mBATJ,QAUO,mCAVP;AAkCA,MAAMC,OAAO,GAAG;AACZ;;;AAGAX,EAAAA,aAAa,EAAE,CAACY,OAA6B,GAAG,EAAjC,KAAkE;AAC7E;;;;;;;;AAQA;AACA;AAEA;AACA,WAAOZ,aAAa,CAACY,OAAD,CAApB;AACH,GAlBW;;AAmBZ;;;AAGAX,EAAAA,iBAAiB,EAAE,CAACY,IAAD,EAAeD,OAAiC,GAAG,EAAnD,KAAkF;AACjG;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOX,iBAAiB,CAACY,IAAD,EAAOD,OAAP,CAAxB;AACH,GArCW;;AAsCZ;;;AAGAN,EAAAA,gBAAgB,EAAGO,IAAD,IAAqC;AACnD;;;;;;;;AAQA;AACA;AAEA;AACA,WAAOP,gBAAgB,CAACO,IAAD,CAAvB;AACH,GAvDW;;AAwDZ;;;AAGAL,EAAAA,kBAAkB,EAAE,CAACK,IAAD,EAAeD,OAAkC,GAAG,EAApD,KAAgF;AAChG;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOJ,kBAAkB,CAACK,IAAD,EAAOD,OAAP,CAAzB;AACH,GA1EW;;AA2EZ;;;AAGAL,EAAAA,eAAe,EAAE,CAACK,OAAqB,GAAG,EAAzB,EAA6BE,OAAsB,GAAG,EAAtD,KAAqF;AAClG;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,WAAOP,eAAe,CAACK,OAAD,EAAUE,OAAV,CAAtB;AACH,GAtGW;;AAuGZ;;;AAGAX,EAAAA,mBAAmB,EAAE,CAACS,OAA2B,GAAG,EAA/B,KAA2D;AAC5E;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOT,mBAAmB,CAACS,OAAD,CAA1B;AACH,GAzHW;;AA0HZ;;;AAGAR,EAAAA,iBAAiB,EAAE,CAACQ,OAA2B,GAAG,EAA/B,KAA2D;AAC1E;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOR,iBAAiB,CAACQ,OAAD,CAAxB;AACH,GA5IW;;AA6IZ;;;AAGAF,EAAAA,mBAAmB,EAAE,CAACE,OAA2B,GAAG,EAA/B,KAA2D;AAC5E;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOF,mBAAmB,CAACE,OAAD,CAA1B;AACH,GA/JW;;AAgKZ;;;AAGAV,EAAAA,qBAAqB,EAAE,CAACU,OAA2B,GAAG,EAA/B,KAA2D;AAC9E;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOV,qBAAqB,CAACU,OAAD,CAA5B;AACH,GAlLW;;AAmLZ;;;AAGAP,EAAAA,kBAAkB,EAAE,CAACO,OAA2B,GAAG,EAA/B,KAA2D;AAC3E;;;;;;;;;AASA;AACA;AAEA;AACA,WAAOP,kBAAkB,CAACO,OAAD,CAAzB;AACH,GArMW;;AAsMZ;;;AAGAH,EAAAA,cAAc,EAAE,CAACM,KAAD,EAAgBH,OAA8B,GAAG,EAAjD,KAA6E;AACzF;;;;;;;;;;AAUA;AACA;AAEA;AACA,WAAOH,cAAc,CAACM,KAAD,EAAQH,OAAR,CAArB;AACH;AAzNW,CAAhB;AA4NA,eAAeD,OAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars,arrow-body-style */\n// noinspection ES6UnusedImports\nimport qs from 'query-string';\nimport { getCategories, getCategoryBySlug } from '../fake-server/endpoints/categories';\nimport { IShopCategory } from '../interfaces/category';\nimport { IProduct, IProductsList } from '../interfaces/product';\nimport { IFilterValues, IListOptions } from '../interfaces/list';\nimport {\n    getDiscountedProducts,\n    getFeaturedProducts,\n    getLatestProducts,\n    getPopularProducts,\n    getProductBySlug,\n    getProductsList,\n    getRelatedProducts,\n    getSuggestions,\n    getTopRatedProducts,\n} from '../fake-server/endpoints/products';\n\nexport interface GetCategoriesOptions {\n    depth?: number;\n}\n\nexport interface GetCategoryBySlugOptions {\n    depth?: number;\n}\n\nexport interface GetRelatedProductsOptions {\n    limit?: number;\n}\n\nexport interface GetProductsOptions {\n    limit?: number;\n    category?: string;\n}\n\nexport type GetSuggestionsOptions = {\n    limit?: number;\n    category?: string;\n};\n\nconst shopApi = {\n    /**\n     * Returns array of categories.\n     */\n    getCategories: (options: GetCategoriesOptions = {}): Promise<IShopCategory[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/categories.json?depth=2\n         *\n         * where:\n         * - 2 = options.depth\n         */\n        // return fetch(`https://example.com/api/categories.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getCategories(options);\n    },\n    /**\n     * Returns category by slug.\n     */\n    getCategoryBySlug: (slug: string, options: GetCategoryBySlugOptions = {}): Promise<IShopCategory> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/categories/power-tools.json?depth=2\n         *\n         * where:\n         * - power-tools = slug\n         * - 2           = options.depth\n         */\n        // return fetch(`https://example.com/api/categories/${slug}.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getCategoryBySlug(slug, options);\n    },\n    /**\n     * Returns product.\n     */\n    getProductBySlug: (slug: string): Promise<IProduct> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/products/screwdriver-a2017.json\n         *\n         * where:\n         * - screwdriver-a2017 = slug\n         */\n        // return fetch(`https://example.com/api/products/${slug}.json`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getProductBySlug(slug);\n    },\n    /**\n     * Returns array of related products.\n     */\n    getRelatedProducts: (slug: string, options: GetRelatedProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/products/screwdriver-a2017/related.json&limit=3\n         *\n         * where:\n         * - screwdriver-a2017 = slug\n         * - limit             = options.limit\n         */\n        // return fetch(`https://example.com/api/products/${slug}/related.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getRelatedProducts(slug, options);\n    },\n    /**\n     * Return products list.\n     */\n    getProductsList: (options: IListOptions = {}, filters: IFilterValues = {}): Promise<IProductsList> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/products.json?page=2&limit=12&sort=name_desc&filter_category=screwdriwers&filter_price=500-1000\n         *\n         * where:\n         * - page            = options.page\n         * - limit           = options.limit\n         * - sort            = options.sort\n         * - filter_category = filters.category\n         * - filter_price    = filters.price\n         */\n        // const params = { ...options };\n        //\n        // Object.keys(filters).forEach((slug) => {\n        //     params[`filter_${slug}`] = filters[slug];\n        // });\n        //\n        // return fetch(`https://example.com/api/products.json?${qs.stringify(params)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getProductsList(options, filters);\n    },\n    /**\n     * Returns array of featured products.\n     */\n    getFeaturedProducts: (options: GetProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/featured-products.json?limit=3&category=power-tools\n         *\n         * where:\n         * - 3           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/featured-products.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getFeaturedProducts(options);\n    },\n    /**\n     * Returns array of latest products.\n     */\n    getLatestProducts: (options: GetProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/latest-products.json?limit=3&category=power-tools\n         *\n         * where:\n         * - 3           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/latest-products.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getLatestProducts(options);\n    },\n    /**\n     * Returns an array of top rated products.\n     */\n    getTopRatedProducts: (options: GetProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/top-rated-products.json?limit=3&category=power-tools\n         *\n         * where:\n         * - 3           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/top-rated-products.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getTopRatedProducts(options);\n    },\n    /**\n     * Returns an array of discounted products.\n     */\n    getDiscountedProducts: (options: GetProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/discounted-products.json?limit=3&category=power-tools\n         *\n         * where:\n         * - 3           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/discounted-products.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getDiscountedProducts(options);\n    },\n    /**\n     * Returns an array of most popular products.\n     */\n    getPopularProducts: (options: GetProductsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/shop/popular-products.json?limit=3&category=power-tools\n         *\n         * where:\n         * - 3           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/popular-products.json?${qs.stringify(options)}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getPopularProducts(options);\n    },\n    /**\n     * Returns search suggestions.\n     */\n    getSuggestions: (query: string, options: GetSuggestionsOptions = {}): Promise<IProduct[]> => {\n        /**\n         * This is what your API endpoint might look like:\n         *\n         * https://example.com/api/search/suggestions.json?query=screwdriver&limit=5&category=power-tools\n         *\n         * where:\n         * - screwdriver = query\n         * - 5           = options.limit\n         * - power-tools = options.category\n         */\n        // return fetch(`https://example.com/api/search/suggestions.json?${qs.stringify({ ...options, query })}`)\n        //     .then((response) => response.json());\n\n        // This is for demonstration purposes only. Remove it and use the code above.\n        return getSuggestions(query, options);\n    },\n};\n\nexport default shopApi;\n"]},"metadata":{},"sourceType":"module"}