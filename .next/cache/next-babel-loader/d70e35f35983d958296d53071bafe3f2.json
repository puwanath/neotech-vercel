{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// application\nimport languages from '../../i18n';\nimport { LOCALE_NAMESPACE } from './localeReducer';\nimport { localeChange } from './localeActions';\nimport { useAppAction, useAppSelector } from '../hooks';\n\nvar localeSelector = function localeSelector(state) {\n  return state[LOCALE_NAMESPACE].current;\n};\n\nexport var useLocale = function useLocale() {\n  _s();\n\n  return useAppSelector(localeSelector);\n};\n\n_s(useLocale, \"bRaY7Fsh/GrWHjZMhGvF04Z7BZI=\", false, function () {\n  return [useAppSelector];\n});\n\nexport function useLanguage(selector) {\n  _s2();\n\n  return useAppSelector(function (state) {\n    var locale = localeSelector(state);\n    var language = languages.find(function (x) {\n      return x.locale === locale;\n    });\n\n    if (!language) {\n      throw Error(\"Language with locale: \".concat(locale, \" not found!\"));\n    }\n\n    if (selector) {\n      return selector(language);\n    }\n\n    return language;\n  });\n}\n\n_s2(useLanguage, \"bRaY7Fsh/GrWHjZMhGvF04Z7BZI=\", false, function () {\n  return [useAppSelector];\n});\n\nexport var useDirection = function useDirection() {\n  _s3();\n\n  return useLanguage(function (language) {\n    return language.direction;\n  });\n};\n\n_s3(useDirection, \"DlB0VrZK86f5u4V+gaqgmmVL1+0=\", false, function () {\n  return [useLanguage];\n});\n\nexport var useMessages = function useMessages() {\n  _s4();\n\n  return useLanguage(function (language) {\n    return language.messages;\n  });\n};\n\n_s4(useMessages, \"DlB0VrZK86f5u4V+gaqgmmVL1+0=\", false, function () {\n  return [useLanguage];\n});\n\nexport var useLocaleChange = function useLocaleChange() {\n  _s5();\n\n  return useAppAction(localeChange);\n};\n\n_s5(useLocaleChange, \"VoC97GPgXs7KucoqJISvaXUKyxs=\", false, function () {\n  return [useAppAction];\n});","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/store/locale/localeHooks.ts"],"names":["languages","LOCALE_NAMESPACE","localeChange","useAppAction","useAppSelector","localeSelector","state","current","useLocale","useLanguage","selector","locale","language","find","x","Error","useDirection","direction","useMessages","messages","useLocaleChange"],"mappings":";;;;;;AAAA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,UAA7C;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAsBA,KAAK,CAACL,gBAAD,CAAL,CAAwBM,OAA9C;AAAA,CAAvB;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA,SAAMJ,cAAc,CAACC,cAAD,CAApB;AAAA,CAAlB;;GAAMG,S;UAAkBJ,c;;;AAI/B,OAAO,SAASK,WAAT,CAAwDC,QAAxD,EAAmG;AAAA;;AACtG,SAAON,cAAc,CAAC,UAACE,KAAD,EAAW;AAC7B,QAAMK,MAAM,GAAGN,cAAc,CAACC,KAAD,CAA7B;AACA,QAAMM,QAAQ,GAAGZ,SAAS,CAACa,IAAV,CAAe,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACH,MAAF,KAAaA,MAApB;AAAA,KAAf,CAAjB;;AAEA,QAAI,CAACC,QAAL,EAAe;AACX,YAAMG,KAAK,iCAA0BJ,MAA1B,iBAAX;AACH;;AAED,QAAID,QAAJ,EAAc;AACV,aAAOA,QAAQ,CAACE,QAAD,CAAf;AACH;;AAED,WAAOA,QAAP;AACH,GAboB,CAArB;AAcH;;IAfeH,W;UACLL,c;;;AAgBX,OAAO,IAAMY,YAAY,GAAG,SAAfA,YAAe;AAAA;;AAAA,SAAMP,WAAW,CAAC,UAACG,QAAD;AAAA,WAAcA,QAAQ,CAACK,SAAvB;AAAA,GAAD,CAAjB;AAAA,CAArB;;IAAMD,Y;UAAqBP,W;;;AAElC,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAc;AAAA;;AAAA,SAAMT,WAAW,CAAC,UAACG,QAAD;AAAA,WAAcA,QAAQ,CAACO,QAAvB;AAAA,GAAD,CAAjB;AAAA,CAApB;;IAAMD,W;UAAoBT,W;;;AAEjC,OAAO,IAAMW,eAAe,GAAG,SAAlBA,eAAkB;AAAA;;AAAA,SAAMjB,YAAY,CAACD,YAAD,CAAlB;AAAA,CAAxB;;IAAMkB,e;UAAwBjB,Y","sourcesContent":["// application\nimport languages from '../../i18n';\nimport { ILanguage } from '../../interfaces/language';\nimport { LOCALE_NAMESPACE } from './localeReducer';\nimport { localeChange } from './localeActions';\nimport { RootState } from '../root/rootTypes';\nimport { useAppAction, useAppSelector } from '../hooks';\n\nconst localeSelector = (state: RootState) => state[LOCALE_NAMESPACE].current;\n\nexport const useLocale = () => useAppSelector(localeSelector);\n\nexport function useLanguage(): ILanguage;\nexport function useLanguage<T extends(lang: ILanguage) => any>(selector: T): ReturnType<T>;\nexport function useLanguage<T extends(lang: ILanguage) => any>(selector?: T): (ILanguage | ReturnType<T>) {\n    return useAppSelector((state) => {\n        const locale = localeSelector(state);\n        const language = languages.find((x) => x.locale === locale);\n\n        if (!language) {\n            throw Error(`Language with locale: ${locale} not found!`);\n        }\n\n        if (selector) {\n            return selector(language);\n        }\n\n        return language;\n    });\n}\n\nexport const useDirection = () => useLanguage((language) => language.direction);\n\nexport const useMessages = () => useLanguage((language) => language.messages);\n\nexport const useLocaleChange = () => useAppAction(localeChange);\n"]},"metadata":{},"sourceType":"module"}