{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// third-party\n// application\nimport { useAppAction } from './hooks';\nconst APPLY_CLIENT_STATE = 'APPLY_CLIENT_STATE';\n\nfunction isApplyClientStateAction(action) {\n  return action.type === APPLY_CLIENT_STATE;\n}\n\nexport function applyClientState(state) {\n  return {\n    type: APPLY_CLIENT_STATE,\n    state\n  };\n}\nexport const useApplyClientState = () => useAppAction(applyClientState);\nexport function withClientState(reducer, namespace) {\n  return (state, action) => {\n    const childState = reducer(state, action);\n\n    if (isApplyClientStateAction(action) && namespace in action.state) {\n      return _objectSpread(_objectSpread({}, action.state[namespace]), {}, {\n        stateFrom: 'client'\n      });\n    }\n\n    if ('stateFrom' in childState) {\n      return childState;\n    }\n\n    return _objectSpread(_objectSpread({}, childState), {}, {\n      stateFrom: false ? 'client' : 'server'\n    });\n  };\n}","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/store/client.ts"],"names":["useAppAction","APPLY_CLIENT_STATE","isApplyClientStateAction","action","type","applyClientState","state","useApplyClientState","withClientState","reducer","namespace","childState","stateFrom"],"mappings":";;;;;;AAAA;AAEA;AAEA,SAASA,YAAT,QAA6B,SAA7B;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;;AAOA,SAASC,wBAAT,CAAiDC,MAAjD,EAAsG;AAClG,SAAOA,MAAM,CAACC,IAAP,KAAgBH,kBAAvB;AACH;;AAED,OAAO,SAASI,gBAAT,CAA4CC,KAA5C,EAAiF;AACpF,SAAO;AACHF,IAAAA,IAAI,EAAEH,kBADH;AAEHK,IAAAA;AAFG,GAAP;AAIH;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAMP,YAAY,CAACK,gBAAD,CAA9C;AAMP,OAAO,SAASG,eAAT,CAKHC,OALG,EAQHC,SARG,EASU;AACb,SAAO,CAACJ,KAAD,EAAWH,MAAX,KAAiF;AACpF,UAAMQ,UAAU,GAAGF,OAAO,CAACH,KAAD,EAAQH,MAAR,CAA1B;;AAEA,QAAID,wBAAwB,CAACC,MAAD,CAAxB,IAAoCO,SAAS,IAAIP,MAAM,CAACG,KAA5D,EAAmE;AAC/D,6CACOH,MAAM,CAACG,KAAP,CAAaI,SAAb,CADP;AAEIE,QAAAA,SAAS,EAAE;AAFf;AAIH;;AAED,QAAI,eAAeD,UAAnB,EAA+B;AAC3B,aAAOA,UAAP;AACH;;AAED,2CACOA,UADP;AAEIC,MAAAA,SAAS,EAAE,QAAkB,QAAlB,GAA6B;AAF5C;AAIH,GAlBD;AAmBH","sourcesContent":["// third-party\nimport { Action } from 'redux';\n// application\nimport { AppReducer } from './types';\nimport { useAppAction } from './hooks';\n\nconst APPLY_CLIENT_STATE = 'APPLY_CLIENT_STATE';\n\ntype ApplyClientStateAction<T> = {\n    type: typeof APPLY_CLIENT_STATE;\n    state: T;\n};\n\nfunction isApplyClientStateAction<T extends any>(action: Action): action is ApplyClientStateAction<T> {\n    return action.type === APPLY_CLIENT_STATE;\n}\n\nexport function applyClientState<T extends object>(state: T): ApplyClientStateAction<T> {\n    return {\n        type: APPLY_CLIENT_STATE,\n        state,\n    };\n}\n\nexport const useApplyClientState = () => useAppAction(applyClientState);\n\nexport type StateFromServer = 'server';\nexport type StateFromClient = 'client';\nexport type StateFrom = StateFromServer | StateFromClient;\n\nexport function withClientState<\n    T extends AppReducer<any, any>,\n    S extends ReturnType<T>,\n    R extends S & { stateFrom: StateFrom }\n>(\n    reducer: T extends AppReducer<ReturnType<T> & { stateFrom: any }, any>\n        ? AppReducer<ReturnType<T> & { stateFrom: never }, any>\n        : T,\n    namespace: string,\n): AppReducer<R> {\n    return (state: S, action: Action | ApplyClientStateAction<{ [ns: string]: any }>): R => {\n        const childState = reducer(state, action);\n\n        if (isApplyClientStateAction(action) && namespace in action.state) {\n            return {\n                ...action.state[namespace],\n                stateFrom: 'client',\n            };\n        }\n\n        if ('stateFrom' in childState) {\n            return childState;\n        }\n\n        return {\n            ...childState,\n            stateFrom: process.browser ? 'client' : 'server',\n        };\n    };\n}\n"]},"metadata":{},"sourceType":"module"}