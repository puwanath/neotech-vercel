{"ast":null,"code":"// react\nimport { useEffect, useRef, useState } from 'react';\n\nfunction AsyncAction(props) {\n  const {\n    action,\n    render\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const canceledRef = useRef(false);\n\n  const run = () => {\n    if (loading || !action) {\n      return;\n    }\n\n    setLoading(true);\n    action().then(() => {\n      if (canceledRef.current) {\n        return;\n      }\n\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => () => {\n    canceledRef.current = true;\n  }, [canceledRef]);\n\n  if (render) {\n    return render({\n      run,\n      loading\n    });\n  }\n\n  return null;\n}\n\nexport default AsyncAction;","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/components/shared/AsyncAction.tsx"],"names":["useEffect","useRef","useState","AsyncAction","props","action","render","loading","setLoading","canceledRef","run","then","current"],"mappings":"AAAA;AACA,SAAgBA,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;AAgBA,SAASC,WAAT,CAAqBC,KAArB,EAA8C;AAC1C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBF,KAA3B;AACA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMO,WAAW,GAAGR,MAAM,CAAC,KAAD,CAA1B;;AAEA,QAAMS,GAAG,GAAG,MAAM;AACd,QAAIH,OAAO,IAAI,CAACF,MAAhB,EAAwB;AACpB;AACH;;AAEDG,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAH,IAAAA,MAAM,GAAGM,IAAT,CAAc,MAAM;AAChB,UAAIF,WAAW,CAACG,OAAhB,EAAyB;AACrB;AACH;;AAEDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAND;AAOH,GAdD;;AAgBAR,EAAAA,SAAS,CAAC,MAAM,MAAM;AAClBS,IAAAA,WAAW,CAACG,OAAZ,GAAsB,IAAtB;AACH,GAFQ,EAEN,CAACH,WAAD,CAFM,CAAT;;AAIA,MAAIH,MAAJ,EAAY;AACR,WAAOA,MAAM,CAAC;AAAEI,MAAAA,GAAF;AAAOH,MAAAA;AAAP,KAAD,CAAb;AACH;;AAED,SAAO,IAAP;AACH;;AAED,eAAeJ,WAAf","sourcesContent":["// react\nimport React, { useEffect, useRef, useState } from 'react';\n\ntype ActionFn = () => Promise<any>;\n\ntype RenderFnProps = {\n    run: () => void;\n    loading: boolean;\n};\n\nexport type RenderFn = (args: RenderFnProps) => React.ReactElement;\n\nexport interface AsyncActionProps {\n    action: ActionFn;\n    render: RenderFn;\n}\n\nfunction AsyncAction(props: AsyncActionProps) {\n    const { action, render } = props;\n    const [loading, setLoading] = useState(false);\n    const canceledRef = useRef(false);\n\n    const run = () => {\n        if (loading || !action) {\n            return;\n        }\n\n        setLoading(true);\n\n        action().then(() => {\n            if (canceledRef.current) {\n                return;\n            }\n\n            setLoading(false);\n        });\n    };\n\n    useEffect(() => () => {\n        canceledRef.current = true;\n    }, [canceledRef]);\n\n    if (render) {\n        return render({ run, loading });\n    }\n\n    return null;\n}\n\nexport default AsyncAction;\n"]},"metadata":{},"sourceType":"module"}