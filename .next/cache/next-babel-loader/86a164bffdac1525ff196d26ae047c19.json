{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\neo.co.th\\\\nextapp\\\\src\\\\components\\\\header\\\\DropdownLanguage.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n// react\nimport React, { useMemo } from 'react'; // third-party\n\nimport { FormattedMessage } from 'react-intl'; // application\n\nimport Dropdown from './Dropdown';\nimport languages from '../../i18n';\nimport { useLanguage, useLocaleChange } from '../../store/locale/localeHooks';\n\nfunction DropdownLanguage() {\n  _s();\n\n  var language = useLanguage();\n  var localeChange = useLocaleChange();\n  var items = useMemo(function () {\n    return languages.map(function (eachLanguage) {\n      return {\n        title: eachLanguage.name,\n        language: eachLanguage,\n        icon: eachLanguage.icon\n      };\n    });\n  }, []);\n\n  var title = __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"topbar.language\",\n    defaultMessage: \"Language\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), ': ', __jsx(\"span\", {\n    className: \"topbar__item-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, language.code));\n\n  return __jsx(Dropdown, {\n    title: title,\n    items: items,\n    withIcons: true,\n    onClick: function onClick(item) {\n      return localeChange(item.language.locale);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  });\n}\n\n_s(DropdownLanguage, \"vYlU2+ckYtXXX4G56ndYy3yypBc=\", false, function () {\n  return [useLanguage, useLocaleChange];\n});\n\n_c = DropdownLanguage;\nexport default DropdownLanguage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropdownLanguage\");","map":{"version":3,"sources":["D:/xampp/htdocs/neo.co.th/nextapp/src/components/header/DropdownLanguage.tsx"],"names":["React","useMemo","FormattedMessage","Dropdown","languages","useLanguage","useLocaleChange","DropdownLanguage","language","localeChange","items","map","eachLanguage","title","name","icon","code","item","locale"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,YAAjC,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,gCAA7C;;AAQA,SAASC,gBAAT,GAA4B;AAAA;;AACxB,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,MAAMI,YAAY,GAAGH,eAAe,EAApC;AAEA,MAAMI,KAA6B,GAAGT,OAAO,CAAC;AAAA,WAC1CG,SAAS,CAACO,GAAV,CAAc,UAACC,YAAD;AAAA,aAAmB;AAC7BC,QAAAA,KAAK,EAAED,YAAY,CAACE,IADS;AAE7BN,QAAAA,QAAQ,EAAEI,YAFmB;AAG7BG,QAAAA,IAAI,EAAEH,YAAY,CAACG;AAHU,OAAnB;AAAA,KAAd,CAD0C;AAAA,GAAD,EAM1C,EAN0C,CAA7C;;AAQA,MAAMF,KAAK,GACP,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,iBAArB;AAAuC,IAAA,cAAc,EAAC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEK,IAFL,EAGI;AAAM,IAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCL,QAAQ,CAACQ,IAA/C,CAHJ,CADJ;;AAQA,SACI,MAAC,QAAD;AACI,IAAA,KAAK,EAAEH,KADX;AAEI,IAAA,KAAK,EAAEH,KAFX;AAGI,IAAA,SAAS,MAHb;AAII,IAAA,OAAO,EAAE,iBAACO,IAAD;AAAA,aAAUR,YAAY,CAACQ,IAAI,CAACT,QAAL,CAAcU,MAAf,CAAtB;AAAA,KAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQH;;GA5BQX,gB;UACYF,W,EACIC,e;;;KAFhBC,gB;AA8BT,eAAeA,gBAAf","sourcesContent":["// react\nimport React, { useMemo } from 'react';\n\n// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// application\nimport Dropdown from './Dropdown';\nimport languages from '../../i18n';\nimport { ILanguage } from '../../interfaces/language';\nimport { useLanguage, useLocaleChange } from '../../store/locale/localeHooks';\n\ninterface DropdownLanguageItem {\n    title: string;\n    language: ILanguage;\n    icon: string;\n}\n\nfunction DropdownLanguage() {\n    const language = useLanguage();\n    const localeChange = useLocaleChange();\n\n    const items: DropdownLanguageItem[] = useMemo(() => (\n        languages.map((eachLanguage) => ({\n            title: eachLanguage.name,\n            language: eachLanguage,\n            icon: eachLanguage.icon,\n        }))\n    ), []);\n\n    const title = (\n        <React.Fragment>\n            <FormattedMessage id=\"topbar.language\" defaultMessage=\"Language\" />\n            {': '}\n            <span className=\"topbar__item-value\">{language.code}</span>\n        </React.Fragment>\n    );\n\n    return (\n        <Dropdown\n            title={title}\n            items={items}\n            withIcons\n            onClick={(item) => localeChange(item.language.locale)}\n        />\n    );\n}\n\nexport default DropdownLanguage;\n"]},"metadata":{},"sourceType":"module"}